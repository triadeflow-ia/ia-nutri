// services\menuService.js

import { config } from '../config/index.js';
import * as whatsappService from './whatsappService.js';
import * as redisService from './redisService.js';
import * as openaiService from './openaiService.js';
import * as alertService from './alertService.js';

export const generatePersonalizedMenu = async (phoneNumber, anamneseData) => {
  try {
    console.log(`üçΩÔ∏è Gerando card√°pio personalizado para: ${phoneNumber}`);
    
    // Enviar mensagem de progresso
    await whatsappService.sendReply(
      config.whatsapp.phoneNumberId,
      config.whatsapp.graphApiToken,
      phoneNumber,
      "üî¨ Analisando seus dados e criando seu plano nutricional...\n\nIsso pode levar 2-3 minutos. ‚è≥"
    );

    // Criar prompt para gera√ß√£o do card√°pio
    const menuPrompt = createMenuPrompt(anamneseData);
    
    // Gerar card√°pio com IA
    const menuResponse = await openaiService.getOpenAIResponse(menuPrompt);
    
    // Processar e salvar card√°pio
    const menuData = await processMenuResponse(phoneNumber, menuResponse);
    
    // Salvar dados do card√°pio
    await redisService.saveTemporaryState(`menu:${phoneNumber}`, {
      menuData: menuData,
      generatedAt: Date.now(),
      timestamp: Date.now()
    });

    // Enviar card√°pio para o usu√°rio
    await sendMenuToUser(phoneNumber, menuData);
    
    // Configurar alertas personalizados
    await alertService.setupPersonalizedAlerts(phoneNumber, anamneseData);
    
  } catch (error) {
    console.error('Error generating personalized menu:', error);
    
    await whatsappService.sendReply(
      config.whatsapp.phoneNumberId,
      config.whatsapp.graphApiToken,
      phoneNumber,
      "‚ùå Ocorreu um erro ao gerar seu card√°pio. Nossa equipe foi notificada e resolveremos isso em breve.\n\nPor favor, tente novamente em alguns minutos."
    );
  }
};

function createMenuPrompt(anamneseData) {
  return `Voc√™ √© um nutricionista especializado. Com base nas informa√ß√µes fornecidas, crie um plano nutricional completo.

DADOS DO CLIENTE:
${JSON.stringify(anamneseData, null, 2)}

Crie um card√°pio de 7 dias (segunda a domingo) incluindo:
1. CAF√â DA MANH√É
2. LANCHE DA MANH√É  
3. ALMO√áO
4. LANCHE DA TARDE
5. JANTAR
6. CEIA (se necess√°rio)

Para cada refei√ß√£o, inclua:
- Ingredientes espec√≠ficos
- Quantidades em medidas caseiras (x√≠caras, colheres, unidades)
- Modo de preparo b√°sico
- Valores nutricionais aproximados (calorias, prote√≠nas, carboidratos, gorduras)

Tamb√©m crie:
- Lista de compras organizada por se√ß√£o do supermercado
- Dicas de preparo e armazenamento
- Sugest√µes de substitui√ß√µes
- Cronograma semanal de preparo

Formate tudo de forma clara e organizada para WhatsApp.`;
}

async function processMenuResponse(phoneNumber, menuResponse) {
  // Processar resposta da IA e estruturar dados
  const lines = menuResponse.split('\n');
  const menuData = {
    weeklyMenu: {},
    shoppingList: [],
    tips: [],
    schedule: {}
  };

  let currentSection = '';
  let currentDay = '';
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    if (trimmedLine.includes('SEGUNDA') || trimmedLine.includes('TER√áA') || 
        trimmedLine.includes('QUARTA') || trimmedLine.includes('QUINTA') ||
        trimmedLine.includes('SEXTA') || trimmedLine.includes('S√ÅBADO') ||
        trimmedLine.includes('DOMINGO')) {
      currentDay = trimmedLine;
      menuData.weeklyMenu[currentDay] = {};
    } else if (trimmedLine.includes('CAF√â') || trimmedLine.includes('LANCHE') || 
               trimmedLine.includes('ALMO√áO') || trimmedLine.includes('JANTAR') ||
               trimmedLine.includes('CEIA')) {
      currentSection = trimmedLine;
      if (currentDay && !menuData.weeklyMenu[currentDay]) {
        menuData.weeklyMenu[currentDay] = {};
      }
      if (currentDay) {
        menuData.weeklyMenu[currentDay][currentSection] = [];
      }
    } else if (trimmedLine.includes('LISTA DE COMPRAS') || trimmedLine.includes('DICAS')) {
      currentSection = trimmedLine;
    } else if (trimmedLine && currentSection && currentDay && 
               menuData.weeklyMenu[currentDay] && menuData.weeklyMenu[currentDay][currentSection]) {
      menuData.weeklyMenu[currentDay][currentSection].push(trimmedLine);
    }
  }

  return menuData;
}

async function sendMenuToUser(phoneNumber, menuData) {
  try {
    // Enviar mensagem de conclus√£o
    await whatsappService.sendReply(
      config.whatsapp.phoneNumberId,
      config.whatsapp.graphApiToken,
      phoneNumber,
      "üéâ *Seu plano nutricional est√° pronto!*\n\nüìã Aqui est√° seu card√°pio personalizado para esta semana:"
    );

    // Enviar card√°pio por partes (WhatsApp tem limite de caracteres)
    const menuText = formatMenuForWhatsApp(menuData);
    const chunks = splitMessageIntoChunks(menuText, 4000);

    for (let i = 0; i < chunks.length; i++) {
      await whatsappService.sendReply(
        config.whatsapp.phoneNumberId,
        config.whatsapp.graphApiToken,
        phoneNumber,
        chunks[i]
      );
      
      // Pequeno delay entre mensagens
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // Enviar lista de compras
    await whatsappService.sendReply(
      config.whatsapp.phoneNumberId,
      config.whatsapp.graphApiToken,
      phoneNumber,
      "üõí *LISTA DE COMPRAS*\n\nOrganize sua lista por se√ß√£o do supermercado para facilitar as compras!"
    );

    // Enviar pr√≥ximos passos
    await whatsappService.sendReply(
      config.whatsapp.phoneNumberId,
      config.whatsapp.graphApiToken,
      phoneNumber,
      "üöÄ *Pr√≥ximos passos:*\n\n‚Ä¢ üì∏ Envie fotos das suas refei√ß√µes para an√°lise\n‚Ä¢ üíß Receba lembretes de hidrata√ß√£o\n‚Ä¢ üí™ Motiva√ß√£o di√°ria personalizada\n‚Ä¢ üìä Acompanhamento de progresso\n\nDigite 'ajuda' para ver todos os comandos dispon√≠veis!"
    );

  } catch (error) {
    console.error('Error sending menu to user:', error);
  }
}

function formatMenuForWhatsApp(menuData) {
  let formattedMenu = '';
  
  for (const [day, meals] of Object.entries(menuData.weeklyMenu)) {
    formattedMenu += `\nüìÖ *${day}*\n\n`;
    
    for (const [meal, items] of Object.entries(meals)) {
      formattedMenu += `üçΩÔ∏è *${meal}*\n`;
      items.forEach(item => {
        formattedMenu += `‚Ä¢ ${item}\n`;
      });
      formattedMenu += '\n';
    }
  }
  
  return formattedMenu;
}

function splitMessageIntoChunks(text, maxLength) {
  const chunks = [];
  let currentChunk = '';
  
  const lines = text.split('\n');
  
  for (const line of lines) {
    if (currentChunk.length + line.length + 1 > maxLength) {
      chunks.push(currentChunk);
      currentChunk = line + '\n';
    } else {
      currentChunk += line + '\n';
    }
  }
  
  if (currentChunk) {
    chunks.push(currentChunk);
  }
  
  return chunks;
}

export const getMenuData = async (phoneNumber) => {
  return await redisService.getTemporaryState(`menu:${phoneNumber}`);
};
