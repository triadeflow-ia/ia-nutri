// services\redisService.js

import { redisClient } from '../config/redis.js';

// Fun√ß√µes para gerenciar thread IDs
export async function getThreadId(phoneNumber) {
  return await redisClient.get(`threadId:${phoneNumber}`);
}

export async function setThreadId(phoneNumber, threadId) {
  return await redisClient.set(`threadId:${phoneNumber}`, threadId);
}

export async function deleteThreadId(phoneNumber) {
  return await redisClient.del(`threadId:${phoneNumber}`);
}

// Fun√ß√µes para gerenciar mensagens
export async function getMessageData(messageId) {
  return await redisClient.hGetAll(`message:${messageId}`);
}

export async function saveMessage(messageId, messageData) {
  console.log("Storing message in Redis:", messageData);

  return await redisClient.hSet(`message:${messageId}`, {
    id: messageData.id,
    timestamp: messageData.timestamp,
    phoneNumber: messageData.phoneNumber,
    content: messageData.content,
    assistantId: messageData.assistantId,
    aiPhoneNumber: messageData.aiPhoneNumber,
    threadId: messageData.threadId,
    createdAt: messageData.createdAt,
    localTime: messageData.localTime,
    location: JSON.stringify(messageData.location),
    type: messageData.type,
    status: messageData.status,
    isAutoGenerated: JSON.stringify(messageData.isAutoGenerated),
    deviceInfo: JSON.stringify(messageData.deviceInfo),
    userName: messageData.userName
  });
}

// Fun√ß√£o para armazenar mensagens em conversa√ß√µes
export async function storeMessageInConversation(phoneNumber, threadId, messageData) {
  const key = `conversation:${phoneNumber}:${threadId}`;
  return await redisClient.rPush(key, JSON.stringify(messageData));
}

// Fun√ß√£o para recuperar conversa√ß√£o
export async function getConversation(phoneNumber, threadId) {
  const key = `conversation:${phoneNumber}:${threadId}`;
  const messages = await redisClient.lRange(key, 0, -1);
  return messages.map(msg => JSON.parse(msg));
}

// Fun√ß√£o para limpar conversa√ß√£o
export async function clearConversation(phoneNumber, threadId) {
  const key = `conversation:${phoneNumber}:${threadId}`;
  return await redisClient.del(key);
}

// Fun√ß√£o para verificar se existe uma mensagem
export async function messageExists(messageId) {
  return await redisClient.exists(`message:${messageId}`);
}

// Fun√ß√£o para obter todas as thread IDs
export async function getAllThreadIds() {
  const keys = await redisClient.keys('threadId:*');
  const threadIds = {};
  
  for (const key of keys) {
    const phoneNumber = key.replace('threadId:', '');
    threadIds[phoneNumber] = await redisClient.get(key);
  }
  
  return threadIds;
}

// Fun√ß√£o para salvar estado tempor√°rio
export async function saveTemporaryState(key, value, expireSeconds = 3600) {
  await redisClient.setEx(`temp:${key}`, expireSeconds, JSON.stringify(value));
}

// Fun√ß√£o para obter estado tempor√°rio
export async function getTemporaryState(key) {
  const value = await redisClient.get(`temp:${key}`);
  return value ? JSON.parse(value) : null;
}

// Fun√ß√£o para deletar estado tempor√°rio
export async function deleteTemporaryState(key) {
  return await redisClient.del(`temp:${key}`);
}

// Fun√ß√£o para resetar completamente a mem√≥ria de um n√∫mero
export async function resetUserMemory(phoneNumber) {
  try {
    console.log(`üîÑ Resetando mem√≥ria para o n√∫mero: ${phoneNumber}`);
    
    // 1. Obter thread ID atual
    const threadId = await getThreadId(phoneNumber);
    
    // 2. Deletar thread ID do Redis
    await deleteThreadId(phoneNumber);
    
    // 3. Limpar conversa√ß√£o se thread ID existir
    if (threadId) {
      await clearConversation(phoneNumber, threadId);
      
      // 4. Deletar thread da OpenAI
      try {
        const { deleteThread } = await import('./openaiService.js');
        await deleteThread(threadId);
        console.log(`‚úÖ Thread ${threadId} deletado da OpenAI`);
      } catch (error) {
        console.error('Erro ao deletar thread da OpenAI:', error.message);
      }
    }
    
    // 5. Limpar todas as conversa√ß√µes do n√∫mero (caso haja m√∫ltiplas)
    const conversationKeys = await redisClient.keys(`conversation:${phoneNumber}:*`);
    for (const key of conversationKeys) {
      await redisClient.del(key);
    }
    
    // 6. Limpar mensagens individuais do n√∫mero
    const messageKeys = await redisClient.keys(`message:*`);
    for (const key of messageKeys) {
      const messageData = await redisClient.hGetAll(key);
      if (messageData.phoneNumber === phoneNumber) {
        await redisClient.del(key);
      }
    }
    
    // 7. Limpar estados tempor√°rios do n√∫mero
    const tempKeys = await redisClient.keys(`temp:${phoneNumber}*`);
    for (const key of tempKeys) {
      await redisClient.del(key);
    }
    
    console.log(`‚úÖ Mem√≥ria resetada com sucesso para ${phoneNumber}`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå Erro ao resetar mem√≥ria para ${phoneNumber}:`, error);
    throw error;
  }
}