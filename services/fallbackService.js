// services/fallbackService.js
// Sistema de fallback quando servi√ßos principais est√£o indispon√≠veis

import { ErrorFactory, FallbackError } from '../utils/errors.js';
import logger from '../config/logger.js';
import * as redisService from './redisService.js';

class FallbackService {
  constructor() {
    this.isOpenAIDown = false;
    this.isWhatsAppDown = false;
    this.fallbackMessages = this.initializeFallbackMessages();
    this.responses = this.initializeResponses();
  }

  /**
   * Inicializar mensagens de fallback
   */
  initializeFallbackMessages() {
    return {
      openaiDown: {
        greeting: "üëã Ol√°! Estou com problemas t√©cnicos tempor√°rios, mas posso te ajudar com algumas funcionalidades b√°sicas.",
        help: "üìã Funcionalidades dispon√≠veis:\n‚Ä¢ Informa√ß√µes nutricionais b√°sicas\n‚Ä¢ Respostas pr√©-definidas\n‚Ä¢ Suporte t√©cnico",
        nutrition: "üçé Para informa√ß√µes nutricionais, me diga o alimento que voc√™ quer saber. Exemplo: 'calorias da banana'",
        error: "‚ùå Desculpe, n√£o consegui processar sua solicita√ß√£o. Tente novamente em alguns instantes.",
        goodbye: "üëã Obrigado por usar nosso servi√ßo! Em breve estarei funcionando normalmente."
      },
      whatsappDown: {
        error: "‚ö†Ô∏è Problema tempor√°rio com o WhatsApp. Sua mensagem foi recebida e ser√° respondida assim que poss√≠vel.",
        retry: "üîÑ Tentando reenviar sua mensagem..."
      },
      general: {
        maintenance: "üîß Estamos em manuten√ß√£o. Volte em alguns minutos.",
        overload: "‚è≥ Muitas pessoas est√£o usando o sistema. Aguarde um momento e tente novamente.",
        unknown: "ü§î N√£o entendi sua mensagem. Tente ser mais espec√≠fico ou use uma das op√ß√µes dispon√≠veis."
      }
    };
  }

  /**
   * Inicializar respostas pr√©-definidas
   */
  initializeResponses() {
    return {
      greetings: [
        "üëã Ol√°! Como posso te ajudar hoje?",
        "üòä Oi! Estou aqui para te auxiliar!",
        "ü§ñ Ol√°! Sou seu assistente virtual. Em que posso ajudar?"
      ],
      nutrition: {
        banana: "üçå Banana (100g): ~89 calorias, 1.1g prote√≠na, 23g carboidratos, 0.3g gordura",
        apple: "üçé Ma√ß√£ (100g): ~52 calorias, 0.3g prote√≠na, 14g carboidratos, 0.2g gordura",
        rice: "üçö Arroz branco (100g): ~130 calorias, 2.7g prote√≠na, 28g carboidratos, 0.3g gordura",
        chicken: "üêî Peito de frango (100g): ~165 calorias, 31g prote√≠na, 0g carboidratos, 3.6g gordura"
      },
      help: [
        "üìã Posso te ajudar com:\n‚Ä¢ Informa√ß√µes nutricionais\n‚Ä¢ Dicas de alimenta√ß√£o\n‚Ä¢ C√°lculos b√°sicos",
        "üí° Diga o nome de um alimento para saber suas informa√ß√µes nutricionais!",
        "üçé Exemplo: 'quantas calorias tem uma banana?'"
      ],
      error: [
        "‚ùå Desculpe, n√£o consegui processar sua solicita√ß√£o.",
        "ü§î N√£o entendi. Pode repetir de outra forma?",
        "‚ö†Ô∏è Tive um problema t√©cnico. Tente novamente."
      ]
    };
  }

  /**
   * Verificar se OpenAI est√° funcionando
   */
  async checkOpenAIStatus() {
    try {
      // Implementar verifica√ß√£o real do OpenAI
      // Por enquanto, simular verifica√ß√£o
      return !this.isOpenAIDown;
    } catch (error) {
      logger.error('Error checking OpenAI status', { error: error.message });
      return false;
    }
  }

  /**
   * Verificar se WhatsApp est√° funcionando
   */
  async checkWhatsAppStatus() {
    try {
      // Implementar verifica√ß√£o real do WhatsApp
      // Por enquanto, simular verifica√ß√£o
      return !this.isWhatsAppDown;
    } catch (error) {
      logger.error('Error checking WhatsApp status', { error: error.message });
      return false;
    }
  }

  /**
   * Processar mensagem com fallback
   */
  async processMessageWithFallback(message, phoneNumber, profileName, phoneNumberId, res) {
    try {
      // Verificar status dos servi√ßos
      const openAIStatus = await this.checkOpenAIStatus();
      const whatsAppStatus = await this.checkWhatsAppStatus();

      if (!openAIStatus) {
        return await this.handleOpenAIFallback(message, phoneNumber, profileName, phoneNumberId, res);
      }

      if (!whatsAppStatus) {
        return await this.handleWhatsAppFallback(message, phoneNumber, profileName, phoneNumberId, res);
      }

      // Se ambos est√£o funcionando, processar normalmente
      return { useNormalProcessing: true };

    } catch (error) {
      logger.error('Error in fallback processing', { error: error.message });
      return await this.handleGeneralFallback(message, phoneNumber, profileName, phoneNumberId, res);
    }
  }

  /**
   * Lidar com fallback quando OpenAI est√° fora
   */
  async handleOpenAIFallback(message, phoneNumber, profileName, phoneNumberId, res) {
    try {
      const userMessage = message.text?.body?.toLowerCase() || '';
      
      // Detectar tipo de mensagem
      if (this.isGreeting(userMessage)) {
        return await this.sendFallbackResponse(
          phoneNumberId,
          this.getRandomResponse(this.responses.greetings),
          res
        );
      }

      if (this.isNutritionQuery(userMessage)) {
        return await this.handleNutritionFallback(userMessage, phoneNumberId, res);
      }

      if (this.isHelpRequest(userMessage)) {
        return await this.sendFallbackResponse(
          phoneNumberId,
          this.getRandomResponse(this.responses.help),
          res
        );
      }

      // Resposta gen√©rica
      return await this.sendFallbackResponse(
        phoneNumberId,
        this.fallbackMessages.openaiDown.help,
        res
      );

    } catch (error) {
      logger.error('Error in OpenAI fallback', { error: error.message });
      return await this.sendFallbackResponse(
        phoneNumberId,
        this.fallbackMessages.openaiDown.error,
        res
      );
    }
  }

  /**
   * Lidar com fallback quando WhatsApp est√° fora
   */
  async handleWhatsAppFallback(message, phoneNumber, profileName, phoneNumberId, res) {
    try {
      // Salvar mensagem para processamento posterior
      await this.saveMessageForLaterProcessing(message, phoneNumber, profileName);
      
      // Tentar reenviar ap√≥s delay
      setTimeout(async () => {
        try {
          await this.retryWhatsAppMessage(phoneNumberId, message.from, res);
        } catch (retryError) {
          logger.error('Failed to retry WhatsApp message', { error: retryError.message });
        }
      }, 5000);

      return await this.sendFallbackResponse(
        phoneNumberId,
        this.fallbackMessages.whatsappDown.retry,
        res
      );

    } catch (error) {
      logger.error('Error in WhatsApp fallback', { error: error.message });
      return await this.sendFallbackResponse(
        phoneNumberId,
        this.fallbackMessages.whatsappDown.error,
        res
      );
    }
  }

  /**
   * Lidar com fallback geral
   */
  async handleGeneralFallback(message, phoneNumber, profileName, phoneNumberId, res) {
    try {
      return await this.sendFallbackResponse(
        phoneNumberId,
        this.getRandomResponse(this.responses.error),
        res
      );
    } catch (error) {
      logger.error('Error in general fallback', { error: error.message });
      // √öltimo recurso - resposta m√≠nima
      return { success: false, error: 'Fallback failed' };
    }
  }

  /**
   * Detectar se √© uma sauda√ß√£o
   */
  isGreeting(message) {
    const greetings = ['oi', 'ol√°', 'ola', 'hey', 'hi', 'bom dia', 'boa tarde', 'boa noite'];
    return greetings.some(greeting => message.includes(greeting));
  }

  /**
   * Detectar se √© consulta nutricional
   */
  isNutritionQuery(message) {
    const nutritionKeywords = [
      'caloria', 'calorias', 'prote√≠na', 'proteina', 'carboidrato', 'carboidratos',
      'gordura', 'gorduras', 'nutriente', 'nutrientes', 'alimento', 'alimentos',
      'banana', 'ma√ß√£', 'maca', 'arroz', 'frango', 'carne', 'leite', 'ovo'
    ];
    return nutritionKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Detectar se √© pedido de ajuda
   */
  isHelpRequest(message) {
    const helpKeywords = ['ajuda', 'help', 'como', 'o que', 'quais', 'funcionalidades'];
    return helpKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Lidar com consultas nutricionais no fallback
   */
  async handleNutritionFallback(message, phoneNumberId, res) {
    try {
      // Buscar em respostas pr√©-definidas
      const nutritionResponse = this.findNutritionResponse(message);
      
      if (nutritionResponse) {
        return await this.sendFallbackResponse(phoneNumberId, nutritionResponse, res);
      }

      // Resposta gen√©rica para nutri√ß√£o
      return await this.sendFallbackResponse(
        phoneNumberId,
        this.fallbackMessages.openaiDown.nutrition,
        res
      );

    } catch (error) {
      logger.error('Error in nutrition fallback', { error: error.message });
      return await this.sendFallbackResponse(
        phoneNumberId,
        this.fallbackMessages.openaiDown.error,
        res
      );
    }
  }

  /**
   * Encontrar resposta nutricional pr√©-definida
   */
  findNutritionResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    for (const [food, response] of Object.entries(this.responses.nutrition)) {
      if (lowerMessage.includes(food)) {
        return response;
      }
    }
    
    return null;
  }

  /**
   * Obter resposta aleat√≥ria de uma lista
   */
  getRandomResponse(responses) {
    return responses[Math.floor(Math.random() * responses.length)];
  }

  /**
   * Enviar resposta de fallback
   */
  async sendFallbackResponse(phoneNumberId, message, res) {
    try {
      // Importar whatsappService dinamicamente para evitar depend√™ncia circular
      const { default: whatsappService } = await import('./whatsappService.js');
      const { config } = await import('../config/index.js');
      
      await whatsappService.sendSplitReply(
        phoneNumberId,
        config.whatsapp.graphApiToken,
        res.locals.recipientNumber || 'unknown',
        message,
        res
      );

      return { success: true, fallback: true, message };
    } catch (error) {
      logger.error('Error sending fallback response', { error: error.message });
      return { success: false, error: error.message };
    }
  }

  /**
   * Salvar mensagem para processamento posterior
   */
  async saveMessageForLaterProcessing(message, phoneNumber, profileName) {
    try {
      const messageData = {
        id: message.id || `fallback_${Date.now()}`,
        phoneNumber,
        profileName,
        content: message.text?.body || '',
        type: message.type || 'text',
        timestamp: Date.now(),
        status: 'pending_retry',
        retryCount: 0
      };

      await redisService.saveMessage(messageData.id, messageData);
      logger.info('Message saved for later processing', { phoneNumber, messageId: messageData.id });
    } catch (error) {
      logger.error('Error saving message for later processing', { error: error.message });
    }
  }

  /**
   * Tentar reenviar mensagem do WhatsApp
   */
  async retryWhatsAppMessage(phoneNumberId, recipientNumber, res) {
    try {
      // Implementar l√≥gica de retry
      logger.info('Retrying WhatsApp message', { phoneNumberId, recipientNumber });
      // Aqui voc√™ implementaria a l√≥gica de retry espec√≠fica
    } catch (error) {
      logger.error('Error retrying WhatsApp message', { error: error.message });
    }
  }

  /**
   * Definir status dos servi√ßos
   */
  setOpenAIStatus(isDown) {
    this.isOpenAIDown = isDown;
    logger.info('OpenAI status changed', { isDown });
  }

  setWhatsAppStatus(isDown) {
    this.isWhatsAppDown = isDown;
    logger.info('WhatsApp status changed', { isDown });
  }

  /**
   * Obter status dos servi√ßos
   */
  getServiceStatus() {
    return {
      openai: !this.isOpenAIDown,
      whatsapp: !this.isWhatsAppDown,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * Adicionar nova resposta de fallback
   */
  addFallbackResponse(category, response) {
    if (!this.responses[category]) {
      this.responses[category] = [];
    }
    this.responses[category].push(response);
  }

  /**
   * Adicionar nova resposta nutricional
   */
  addNutritionResponse(food, response) {
    this.responses.nutrition[food.toLowerCase()] = response;
  }
}

// Inst√¢ncia singleton
const fallbackService = new FallbackService();

export default fallbackService;

