#!/bin/bash

# Script de Deploy para IA Atendimento Bot
# Executa valida√ß√µes e prepara para deploy

set -e

echo "üöÄ Iniciando processo de deploy..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

log "Verificando ambiente..."

# Verificar Node.js
if ! command -v node &> /dev/null; then
    error "Node.js n√£o est√° instalado"
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2)
REQUIRED_VERSION="22.0.0"

if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$NODE_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then
    error "Node.js vers√£o $REQUIRED_VERSION ou superior √© necess√°ria. Vers√£o atual: $NODE_VERSION"
    exit 1
fi

success "Node.js vers√£o $NODE_VERSION OK"

# Verificar se .env existe
if [ ! -f ".env" ]; then
    warning ".env n√£o encontrado. Copiando de env.example..."
    cp env.example .env
    warning "Configure as vari√°veis de ambiente em .env antes de continuar"
fi

# Instalar depend√™ncias
log "Instalando depend√™ncias..."
npm install

# Executar valida√ß√£o
log "Executando valida√ß√£o da aplica√ß√£o..."
if node validate-app.js; then
    success "Valida√ß√£o passou com sucesso!"
else
    error "Valida√ß√£o falhou. Corrija os problemas antes de fazer deploy."
    exit 1
fi

# Verificar se git est√° limpo
if [ -d ".git" ]; then
    if ! git diff --quiet; then
        warning "H√° mudan√ßas n√£o commitadas. Commitando automaticamente..."
        git add .
        git commit -m "Auto-commit before deploy: $(date)"
    fi
    
    # Push para reposit√≥rio
    log "Fazendo push para o reposit√≥rio..."
    git push origin main
    success "Push realizado com sucesso!"
fi

# Verificar se √© ambiente de produ√ß√£o
if [ "$NODE_ENV" = "production" ]; then
    log "Ambiente de produ√ß√£o detectado"
    
    # Verificar vari√°veis cr√≠ticas
    if [ -z "$OPENAI_API_KEY" ] || [ -z "$WHATSAPP_TOKEN" ] || [ -z "$WHATSAPP_VERIFY_TOKEN" ]; then
        error "Vari√°veis cr√≠ticas n√£o configuradas. Verifique OPENAI_API_KEY, WHATSAPP_TOKEN e WHATSAPP_VERIFY_TOKEN"
        exit 1
    fi
    
    success "Vari√°veis de ambiente cr√≠ticas configuradas"
fi

# Executar testes (se existirem)
if [ -f "package.json" ] && grep -q '"test"' package.json; then
    log "Executando testes..."
    npm test || warning "Alguns testes falharam, mas continuando..."
fi

# Build da aplica√ß√£o (se necess√°rio)
if [ -f "Dockerfile" ]; then
    log "Build da imagem Docker..."
    docker build -t ia-atendimento-bot:latest .
    success "Imagem Docker constru√≠da com sucesso!"
fi

success "‚úÖ Deploy preparado com sucesso!"
echo ""
log "üìã Pr√≥ximos passos:"
echo "  1. Configure as vari√°veis de ambiente no Render"
echo "  2. Configure o webhook do WhatsApp: https://seu-app.onrender.com/webhook"
echo "  3. Teste os endpoints principais"
echo "  4. Configure o webhook do Stripe (se aplic√°vel)"
echo ""
log "üîó URLs importantes:"
echo "  - Health Check: https://seu-app.onrender.com/monitoring/health"
echo "  - Admin Dashboard: https://seu-app.onrender.com/admin"
echo "  - Webhook WhatsApp: https://seu-app.onrender.com/webhook"
echo ""
success "üéâ Deploy pronto! Boa sorte!"
